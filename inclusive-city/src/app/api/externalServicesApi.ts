//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiBase {
  private getJwtFromCookie(): string | undefined {
    return document.cookie
      .split("; ")
      .find((x) => x.startsWith("API_TOKEN="))
      ?.split("=")[1];
  }

  protected transformOptions(options: RequestInit): Promise<RequestInit> {
    options.headers = {
      ...options?.headers,
      Authorization: `Bearer ${this.getJwtFromCookie()}`,
    };

    return Promise.resolve(options);
  }
}

export class ReviewClient extends ApiBase {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    super();
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "";
  }

  getObjectReviews(osmId: number): Promise<ReviewDto[]> {
    let url_ = this.baseUrl + "/api/v1/Review/osm/{osmId}";
    if (osmId === undefined || osmId === null)
      throw new Error("The parameter 'osmId' must be defined.");
    url_ = url_.replace("{osmId}", encodeURIComponent("" + osmId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processGetObjectReviews(_response);
      });
  }

  protected processGetObjectReviews(response: Response): Promise<ReviewDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as ReviewDto[]);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ReviewDto[]>(null as any);
  }

  addReview(command: AddReviewCommand): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/v1/Review";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/octet-stream",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processAddReview(_response);
      });
  }

  protected processAddReview(response: Response): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get("content-disposition")
        : undefined;
      let fileNameMatch = contentDisposition
        ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(
            contentDisposition
          )
        : undefined;
      let fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[3] || fileNameMatch[2]
          : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition
          ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
          : undefined;
        fileName =
          fileNameMatch && fileNameMatch.length > 1
            ? fileNameMatch[1]
            : undefined;
      }
      return response.blob().then((blob) => {
        return {
          fileName: fileName,
          data: blob,
          status: status,
          headers: _headers,
        };
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<FileResponse>(null as any);
  }

  deleteReview(reviewId: number | undefined): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/v1/Review?";
    if (reviewId === null)
      throw new Error("The parameter 'reviewId' cannot be null.");
    else if (reviewId !== undefined)
      url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {
        Accept: "application/octet-stream",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processDeleteReview(_response);
      });
  }

  protected processDeleteReview(response: Response): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get("content-disposition")
        : undefined;
      let fileNameMatch = contentDisposition
        ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(
            contentDisposition
          )
        : undefined;
      let fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[3] || fileNameMatch[2]
          : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition
          ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
          : undefined;
        fileName =
          fileNameMatch && fileNameMatch.length > 1
            ? fileNameMatch[1]
            : undefined;
      }
      return response.blob().then((blob) => {
        return {
          fileName: fileName,
          data: blob,
          status: status,
          headers: _headers,
        };
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<FileResponse>(null as any);
  }
}

export class RoutingClient extends ApiBase {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    super();
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "";
  }

  getComputedRoute(
    originLatitude: number | undefined,
    originLongitude: number | undefined,
    destinationLatitude: number | undefined,
    destinationLongitude: number | undefined
  ): Promise<OsrmRouteDto> {
    let url_ = this.baseUrl + "/api/v1/Routing?";
    if (originLatitude === null)
      throw new Error("The parameter 'originLatitude' cannot be null.");
    else if (originLatitude !== undefined)
      url_ += "OriginLatitude=" + encodeURIComponent("" + originLatitude) + "&";
    if (originLongitude === null)
      throw new Error("The parameter 'originLongitude' cannot be null.");
    else if (originLongitude !== undefined)
      url_ +=
        "OriginLongitude=" + encodeURIComponent("" + originLongitude) + "&";
    if (destinationLatitude === null)
      throw new Error("The parameter 'destinationLatitude' cannot be null.");
    else if (destinationLatitude !== undefined)
      url_ +=
        "DestinationLatitude=" +
        encodeURIComponent("" + destinationLatitude) +
        "&";
    if (destinationLongitude === null)
      throw new Error("The parameter 'destinationLongitude' cannot be null.");
    else if (destinationLongitude !== undefined)
      url_ +=
        "DestinationLongitude=" +
        encodeURIComponent("" + destinationLongitude) +
        "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processGetComputedRoute(_response);
      });
  }

  protected processGetComputedRoute(response: Response): Promise<OsrmRouteDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as OsrmRouteDto);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<OsrmRouteDto>(null as any);
  }
}

export class StructureClient extends ApiBase {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    super();
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "";
  }

  getStructures(
    latitude: number | undefined,
    longitude: number | undefined,
    around: number | undefined,
    amenity: string | null | undefined,
    name: string | null | undefined,
    isWheelChair: boolean | undefined,
    shouldRetrieveRating: boolean | undefined,
    shouldRetrieveReviews: boolean | undefined,
    shouldGetImages: boolean | undefined
  ): Promise<GetStructuresDto> {
    let url_ = this.baseUrl + "/api/v1/Structure?";
    if (latitude === null)
      throw new Error("The parameter 'latitude' cannot be null.");
    else if (latitude !== undefined)
      url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&";
    if (longitude === null)
      throw new Error("The parameter 'longitude' cannot be null.");
    else if (longitude !== undefined)
      url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&";
    if (around === null)
      throw new Error("The parameter 'around' cannot be null.");
    else if (around !== undefined)
      url_ += "Around=" + encodeURIComponent("" + around) + "&";
    if (amenity !== undefined && amenity !== null)
      url_ += "Amenity=" + encodeURIComponent("" + amenity) + "&";
    if (name !== undefined && name !== null)
      url_ += "Name=" + encodeURIComponent("" + name) + "&";
    if (isWheelChair === null)
      throw new Error("The parameter 'isWheelChair' cannot be null.");
    else if (isWheelChair !== undefined)
      url_ += "IsWheelChair=" + encodeURIComponent("" + isWheelChair) + "&";
    if (shouldRetrieveRating === null)
      throw new Error("The parameter 'shouldRetrieveRating' cannot be null.");
    else if (shouldRetrieveRating !== undefined)
      url_ +=
        "ShouldRetrieveRating=" +
        encodeURIComponent("" + shouldRetrieveRating) +
        "&";
    if (shouldRetrieveReviews === null)
      throw new Error("The parameter 'shouldRetrieveReviews' cannot be null.");
    else if (shouldRetrieveReviews !== undefined)
      url_ +=
        "ShouldRetrieveReviews=" +
        encodeURIComponent("" + shouldRetrieveReviews) +
        "&";
    if (shouldGetImages === null)
      throw new Error("The parameter 'shouldGetImages' cannot be null.");
    else if (shouldGetImages !== undefined)
      url_ +=
        "ShouldGetImages=" + encodeURIComponent("" + shouldGetImages) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processGetStructures(_response);
      });
  }

  protected processGetStructures(
    response: Response
  ): Promise<GetStructuresDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as GetStructuresDto);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<GetStructuresDto>(null as any);
  }

  getStructureById(
    osmId: number | undefined,
    type: string | undefined,
    shouldRetrieveRating: boolean | undefined,
    shouldRetrieveReviews: boolean | undefined,
    shouldGetImages: boolean | undefined
  ): Promise<ElementDto> {
    let url_ = this.baseUrl + "/api/v1/Structure/structure-by-id?";
    if (osmId === null)
      throw new Error("The parameter 'osmId' cannot be null.");
    else if (osmId !== undefined)
      url_ += "OsmId=" + encodeURIComponent("" + osmId) + "&";
    if (type === null) throw new Error("The parameter 'type' cannot be null.");
    else if (type !== undefined)
      url_ += "Type=" + encodeURIComponent("" + type) + "&";
    if (shouldRetrieveRating === null)
      throw new Error("The parameter 'shouldRetrieveRating' cannot be null.");
    else if (shouldRetrieveRating !== undefined)
      url_ +=
        "ShouldRetrieveRating=" +
        encodeURIComponent("" + shouldRetrieveRating) +
        "&";
    if (shouldRetrieveReviews === null)
      throw new Error("The parameter 'shouldRetrieveReviews' cannot be null.");
    else if (shouldRetrieveReviews !== undefined)
      url_ +=
        "ShouldRetrieveReviews=" +
        encodeURIComponent("" + shouldRetrieveReviews) +
        "&";
    if (shouldGetImages === null)
      throw new Error("The parameter 'shouldGetImages' cannot be null.");
    else if (shouldGetImages !== undefined)
      url_ +=
        "ShouldGetImages=" + encodeURIComponent("" + shouldGetImages) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processGetStructureById(_response);
      });
  }

  protected processGetStructureById(response: Response): Promise<ElementDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as ElementDto);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ElementDto>(null as any);
  }

  uploadImages(command: UploadStructureImagesCommand): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/v1/Structure/images";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/octet-stream",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processUploadImages(_response);
      });
  }

  protected processUploadImages(response: Response): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get("content-disposition")
        : undefined;
      let fileNameMatch = contentDisposition
        ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(
            contentDisposition
          )
        : undefined;
      let fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[3] || fileNameMatch[2]
          : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition
          ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
          : undefined;
        fileName =
          fileNameMatch && fileNameMatch.length > 1
            ? fileNameMatch[1]
            : undefined;
      }
      return response.blob().then((blob) => {
        return {
          fileName: fileName,
          data: blob,
          status: status,
          headers: _headers,
        };
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<FileResponse>(null as any);
  }

  getInclusiveInfrastructure(
    latitude: number | undefined,
    longitude: number | undefined,
    around: number | undefined,
    toilets: boolean | undefined,
    busStops: boolean | undefined,
    kerbs: boolean | undefined,
    tactilePaving: boolean | undefined,
    ramps: boolean | undefined,
    shouldRetrieveRating: boolean | undefined,
    shouldRetrieveReviews: boolean | undefined,
    shouldGetImages: boolean | undefined
  ): Promise<GetStructuresDto> {
    let url_ = this.baseUrl + "/api/v1/Structure/inclusive-infrastructure?";
    if (latitude === null)
      throw new Error("The parameter 'latitude' cannot be null.");
    else if (latitude !== undefined)
      url_ += "Latitude=" + encodeURIComponent("" + latitude) + "&";
    if (longitude === null)
      throw new Error("The parameter 'longitude' cannot be null.");
    else if (longitude !== undefined)
      url_ += "Longitude=" + encodeURIComponent("" + longitude) + "&";
    if (around === null)
      throw new Error("The parameter 'around' cannot be null.");
    else if (around !== undefined)
      url_ += "Around=" + encodeURIComponent("" + around) + "&";
    if (toilets === null)
      throw new Error("The parameter 'toilets' cannot be null.");
    else if (toilets !== undefined)
      url_ += "Toilets=" + encodeURIComponent("" + toilets) + "&";
    if (busStops === null)
      throw new Error("The parameter 'busStops' cannot be null.");
    else if (busStops !== undefined)
      url_ += "BusStops=" + encodeURIComponent("" + busStops) + "&";
    if (kerbs === null)
      throw new Error("The parameter 'kerbs' cannot be null.");
    else if (kerbs !== undefined)
      url_ += "Kerbs=" + encodeURIComponent("" + kerbs) + "&";
    if (tactilePaving === null)
      throw new Error("The parameter 'tactilePaving' cannot be null.");
    else if (tactilePaving !== undefined)
      url_ += "TactilePaving=" + encodeURIComponent("" + tactilePaving) + "&";
    if (ramps === null)
      throw new Error("The parameter 'ramps' cannot be null.");
    else if (ramps !== undefined)
      url_ += "Ramps=" + encodeURIComponent("" + ramps) + "&";
    if (shouldRetrieveRating === null)
      throw new Error("The parameter 'shouldRetrieveRating' cannot be null.");
    else if (shouldRetrieveRating !== undefined)
      url_ +=
        "ShouldRetrieveRating=" +
        encodeURIComponent("" + shouldRetrieveRating) +
        "&";
    if (shouldRetrieveReviews === null)
      throw new Error("The parameter 'shouldRetrieveReviews' cannot be null.");
    else if (shouldRetrieveReviews !== undefined)
      url_ +=
        "ShouldRetrieveReviews=" +
        encodeURIComponent("" + shouldRetrieveReviews) +
        "&";
    if (shouldGetImages === null)
      throw new Error("The parameter 'shouldGetImages' cannot be null.");
    else if (shouldGetImages !== undefined)
      url_ +=
        "ShouldGetImages=" + encodeURIComponent("" + shouldGetImages) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processGetInclusiveInfrastructure(_response);
      });
  }

  protected processGetInclusiveInfrastructure(
    response: Response
  ): Promise<GetStructuresDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as GetStructuresDto);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<GetStructuresDto>(null as any);
  }
}

export interface ReviewDto {
  id?: number;
  osmId?: number;
  osmType?: string;
  comment?: string;
  photoUrl?: string | null;
  createdBy?: string;
  username?: string;
  createdAt?: Date;
  rate?: number;
}

export interface AddReviewCommand {
  osmId?: number;
  osmType?: string;
  comment?: string;
  imageBase64?: string | null;
  createdBy?: string;
  username?: string;
  rate?: number;
}

export interface OsrmRouteDto {
  code?: string;
  routes?: Route[];
  waypoints?: Waypoint[];
}

export interface Route {
  weightName?: string;
  weight?: number;
  duration?: number;
  distance?: number;
  geometry?: string;
  legs?: Leg[];
}

export interface Leg {
  duration?: number;
  distance?: number;
  weight?: number;
  summary?: string;
  steps?: Step[];
  annotation?: Annotation;
}

export interface Step {
  duration?: number;
  distance?: number;
  weight?: number;
  maneuver?: Maneuver;
  geometry?: string;
  name?: string;
  mode?: string;
  instruction?: string;
}

export interface Maneuver {
  bearingBefore?: number;
  bearingAfter?: number;
  location?: number[];
  type?: string;
  modifier?: string;
  exit?: string;
}

export interface Annotation {
  distance?: number[];
  duration?: number[];
  speed?: number[];
}

export interface Waypoint {
  hint?: string;
  distance?: number;
  name?: string;
  location?: number[];
}

export interface GetStructuresDto {
  elements?: ElementDto[];
}

export interface OverpassElementDto {
  id?: number;
  type?: string;
  lat?: number | null;
  lon?: number | null;
  nodes?: number[] | null;
  tags?: { [key: string]: string } | null;
  members?: OverpassMemberDto[] | null;
  geometry?: OverpassGeometryDto[] | null;
}

export interface ElementDto extends OverpassElementDto {
  rating?: number;
  reviews?: ReviewDto[] | null;
  imageUrls?: string[] | null;
}

export interface OverpassMemberDto {
  type?: string;
  ref?: number;
  role?: string;
}

export interface OverpassGeometryDto {
  lat?: number;
  lon?: number;
}

export interface UploadStructureImagesCommand {
  osmId?: number;
  images?: ImageDto[];
}

export interface ImageDto {
  imageBase64?: string | null;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
